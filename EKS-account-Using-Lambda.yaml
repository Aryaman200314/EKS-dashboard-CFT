AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Launch EKS dashboard app with EKS access IAM role, optional cluster access Lambda, and automatic EC2 deployment.

Parameters:
  EksClusterRoleName:
    Type: String
    Description: Name of the IAM role to be created for EKS access

  SourceAccountId:
    Type: String
    Description: AWS Account ID of the application account
    AllowedPattern: '^[0-9]{12}$'
    ConstraintDescription: Must be a valid 12-digit AWS account ID

  EnableAccessEntry:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: >
      Set to 'true' to automatically whitelist the IAM role in all EKS clusters with API or API_AND_CONFIG_MAP auth mode.

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for EC2 instance

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for EC2 instance

  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for EC2 instance (Amazon Linux 2 recommended)

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair

  GitRepoUrl:
    Type: String
    Description: Git repository URL for the EKS dashboard app

Conditions:
  EnableAccessEntryIsTrue: !Equals [ !Ref EnableAccessEntry, 'true' ]

Resources:
  EksAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: cft-eks-access-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EKSReadonlyAccess
            Effect: Allow
            Action:
              - eks:ListClusters
              - eks:DescribeCluster
              - eks:ListNodegroups
              - eks:DescribeNodegroup
              - eks:ListAddons
              - eks:DescribeAddon
              - eks:ListFargateProfiles
              - cloudwatch:GetMetricData
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
              - sts:GetCallerIdentity
            Resource: '*'

  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref EksClusterRoleName
      Description: "EKS access role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${SourceAccountId}:role/
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref EksAccessPolicy

  # EC2 Instance Profile for IAM Role
  EksDashboardEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EksClusterRole

  # Security Group for EC2 Instance
  EksDashboardEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to EKS dashboard app
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # EC2 instance for EKS dashboard app
  EksDashboardEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref EksDashboardEC2InstanceProfile
      SecurityGroupIds:
        - !Ref EksDashboardEC2SecurityGroup
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 git
          amazon-linux-extras enable python3.8
          yum install -y python3.8
          alternatives --set python3 /usr/bin/python3.8
          python3 -m ensurepip --upgrade
          pip3 install --upgrade pip
          cd /opt
          git clone ${GitRepoUrl} eks-dashboard
          cd eks-dashboard
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          nohup uvicorn app:app --host 0.0.0.0 --port 80 &
          # Optionally enable at boot (use a systemd service for prod use)

  # Lambda and supporting roles for optional EKS access entry
  ClusterAccessLambdaRole:
    Condition: EnableAccessEntryIsTrue
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowEKSAccessEntryUpdate
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:ListClusters
                  - eks:DescribeCluster
                  - eks:ListAccessEntries
                  - eks:CreateAccessEntry
                  - eks:AssociateAccessPolicy
                Resource: '*'

  ClusterAccessHandler:
    Condition: EnableAccessEntryIsTrue
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EKSAccessEntryUpdater
      Handler: index.handler
      Runtime: python3.9
      Timeout: 60
      Role: !GetAtt ClusterAccessLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      eks = boto3.client('eks')
                      clusters = eks.list_clusters().get('clusters', [])
                      principal_arn = event['ResourceProperties']['RoleArn']

                      for cluster in clusters:
                          cluster_info = eks.describe_cluster(name=cluster)['cluster']
                          auth_mode = cluster_info.get('accessConfig', {}).get('authenticationMode', '')

                          if auth_mode in ['API_AND_CONFIG_MAP', 'API']:
                              existing_entries = eks.list_access_entries(clusterName=cluster).get('accessEntries', [])
                              already_exists = any(e['principalArn'] == principal_arn for e in existing_entries)

                              if not already_exists:
                                  eks.create_access_entry(
                                      clusterName=cluster,
                                      principalArn=principal_arn,
                                      type='STANDARD'
                                  )

                                  eks.associate_access_policy(
                                      clusterName=cluster,
                                      principalArn=principal_arn,
                                      policyArn='arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy',
                                      accessScope={
                                          'type': 'cluster'
                                      }
                                  )

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {e}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": str(e)})

  TriggerAccessEntry:
    Condition: EnableAccessEntryIsTrue
    Type: Custom::ClusterAccessEntryTrigger
    Properties:
      ServiceToken: !GetAtt ClusterAccessHandler.Arn
      RoleArn: !GetAtt EksClusterRole.Arn

Outputs:
  EksRoleArn:
    Description: ARN of the IAM role created for EKS access
    Value: !GetAtt EksClusterRole.Arn

  DashboardInstancePublicDNS:
    Description: Public DNS of the EC2 instance running the EKS dashboard app
    Value: !GetAtt EksDashboardEC2.PublicDnsName

  DashboardInstanceId:
    Description: EC2 InstanceId of the EKS dashboard app server
    Value: !Ref EksDashboardEC2
